[
    {
        "id": "803455e.14d3d28",
        "type": "tab",
        "label": "Data Collection",
        "disabled": false,
        "info": ""
    },
    {
        "id": "56ac0cbb.978d6c",
        "type": "tab",
        "label": "KPI-Calc-Dummy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f7e739bb.370638",
        "type": "tab",
        "label": "KPI Estimation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b6ec4c8d.61eac",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt-broker",
        "port": "1883",
        "clientid": "nodered-client",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "4ad3ce8d.582c5",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "edgedb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "99d8c9c3d94c327e",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://opc-server:4841",
        "secpol": "Basic256",
        "secmode": "SIGN",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "a67248fc.148ff8",
        "type": "comment",
        "z": "803455e.14d3d28",
        "name": "### Generate dummy data  and storage in influxdb ###",
        "info": "",
        "x": 300,
        "y": 80,
        "wires": []
    },
    {
        "id": "9e8378b0.74b62",
        "type": "inject",
        "z": "803455e.14d3d28",
        "name": "n-samples",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "samples_number_n",
        "payload": "20",
        "payloadType": "num",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "925a5c7.deaec2",
                "6dc5f6c6.740bc8",
                "43bc8a92.aad59c",
                "1101d4e.caa782b"
            ]
        ]
    },
    {
        "id": "1101d4e.caa782b",
        "type": "function",
        "z": "803455e.14d3d28",
        "name": "Write_KPI_PowerDrive1_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n\n        measurement: \"powerdrive1\",\n        fields:{\n            name: \"powerdrive1\",\n            value:(Math.random() * (999.0 - 750.0 + 1) + 750.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "bdcb1de8.cd129",
                "6a295d91.59ab5c",
                "edc207be.ce696"
            ]
        ]
    },
    {
        "id": "925a5c7.deaec2",
        "type": "function",
        "z": "803455e.14d3d28",
        "name": "Write_KPI_PowerDrive2_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 800 and 999 Watt\n        measurement: \"powerdrive2\",\n        fields:{\n            name: \"powerdrive2\",\n            value:(Math.random() * (999.0 - 800.0 + 1) + 800.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 300,
        "wires": [
            [
                "ef28ccb6.75c6e",
                "6a295d91.59ab5c",
                "edc207be.ce696"
            ]
        ]
    },
    {
        "id": "6dc5f6c6.740bc8",
        "type": "function",
        "z": "803455e.14d3d28",
        "name": "Write_KPI_VoltageDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 48 and 50 Volt\n        measurement: \"voltagedrive3\",\n        fields:{\n            name: \"voltagedrive3\",\n            value:(Math.random() * (50.0 - 48.0) + 48.0),\n            qualitycode: false\n            \n        },\n        ttimestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 360,
        "wires": [
            [
                "6a295d91.59ab5c",
                "1fe4faea.f61d45",
                "edc207be.ce696"
            ]
        ]
    },
    {
        "id": "43bc8a92.aad59c",
        "type": "function",
        "z": "803455e.14d3d28",
        "name": "Write_KPI_CurrentDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 18 and 20 Ampere\n        measurement: \"currentdrive3\",\n        fields:{\n            name: \"currentdrive3\",\n            value:(Math.random() * (20.0 - 18.0) + 18.0),\n            qualitycode: false\n            \n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "6a295d91.59ab5c",
                "14aad25e.88d496",
                "edc207be.ce696"
            ]
        ]
    },
    {
        "id": "6a295d91.59ab5c",
        "type": "influxdb batch",
        "z": "803455e.14d3d28",
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_influxdb",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "edc207be.ce696",
        "type": "link out",
        "z": "803455e.14d3d28",
        "name": "data_gen",
        "links": [
            "84d99c19.67892",
            "554edde8.db9efc"
        ],
        "x": 925,
        "y": 480,
        "wires": []
    },
    {
        "id": "bdcb1de8.cd129",
        "type": "debug",
        "z": "803455e.14d3d28",
        "name": "KPI-Result_PowerDrive1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 990,
        "y": 240,
        "wires": []
    },
    {
        "id": "ef28ccb6.75c6e",
        "type": "debug",
        "z": "803455e.14d3d28",
        "name": "KPI-Result_PowerDrive2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "1fe4faea.f61d45",
        "type": "debug",
        "z": "803455e.14d3d28",
        "name": "KPI-Result_VoltageDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 380,
        "wires": []
    },
    {
        "id": "14aad25e.88d496",
        "type": "debug",
        "z": "803455e.14d3d28",
        "name": "KPI-Result_CurrentDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "1f383f974e86d387",
        "type": "function",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "store data",
        "func": "\nmsgoutput={}\n//msgoutput.measurement = msg.topic.split(';')[1].slice(2);\n/*msgoutput.payload = {\n    serverTimestamp: msg.serverTimestamp.toISOString(),\n    value: Math.round(msg.payload * 1e2)/ 1e2,\n    name: msgoutput.measurement,\n}*/\n\nBeta = [{\n    measurement: msg.topic.split(';')[1].slice(2),\n    fields:{\n        name: msg.topic.split(';')[1].slice(2),\n        value: Math.round(msg.payload * 1e2)/ 1e2,\n        qualitycode: false\n    },\n    timestamp: new Date()\n}]\n\nmsgoutput.payload = Beta;\n\nreturn msgoutput;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 760,
        "wires": [
            [
                "c41865e7d1104ade",
                "52089d7cd8e56e3f",
                "0c7cbde017b44877"
            ]
        ]
    },
    {
        "id": "b04a16e38b71dffd",
        "type": "debug",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "opc output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 770,
        "y": 700,
        "wires": []
    },
    {
        "id": "c41865e7d1104ade",
        "type": "debug",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "output to influx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 700,
        "wires": []
    },
    {
        "id": "cbc4bb227efe36c6",
        "type": "inject",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "powerdrive2-Temp",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=temperatur2;datatype=Float",
        "payload": "1000",
        "payloadType": "num",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "63347d527e8207ff"
            ]
        ]
    },
    {
        "id": "8e359fccc4764064",
        "type": "inject",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "powerdrive1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=powerdrive1;datatype=Float",
        "payload": "2000",
        "payloadType": "num",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "63347d527e8207ff"
            ]
        ]
    },
    {
        "id": "cc3560626b80a10b",
        "type": "inject",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "powerdrive2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=powerdrive2;datatype=Float",
        "payload": "2000",
        "payloadType": "num",
        "x": 250,
        "y": 760,
        "wires": [
            [
                "63347d527e8207ff"
            ]
        ]
    },
    {
        "id": "7ce4d28a7ad4d351",
        "type": "inject",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "currentdrive1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=currentdrive1;datatype=Float",
        "payload": "1000",
        "payloadType": "num",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "63347d527e8207ff"
            ]
        ]
    },
    {
        "id": "959aea5922760439",
        "type": "inject",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "voltagedrive1",
        "props": [
            {
                "p": "payload",
                "v": "1000",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "ns=1;s=voltagedrive1;datatype=Double",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=voltagedrive1;datatype=Double",
        "payload": "1000",
        "payloadType": "num",
        "x": 240,
        "y": 680,
        "wires": [
            [
                "63347d527e8207ff"
            ]
        ]
    },
    {
        "id": "63347d527e8207ff",
        "type": "OpcUa-Client",
        "z": "803455e.14d3d28",
        "d": true,
        "endpoint": "99d8c9c3d94c327e",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "folderName4PKI": "",
        "name": "",
        "x": 542,
        "y": 739,
        "wires": [
            [
                "1f383f974e86d387",
                "b04a16e38b71dffd"
            ]
        ]
    },
    {
        "id": "52089d7cd8e56e3f",
        "type": "influxdb batch",
        "z": "803455e.14d3d28",
        "d": true,
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_influxdb",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1010,
        "y": 780,
        "wires": []
    },
    {
        "id": "f4c9ffa958ec9c1a",
        "type": "comment",
        "z": "803455e.14d3d28",
        "name": "### Receive simulated data from a OPC UA Server Simulator and storage in influxdb ###",
        "info": "",
        "x": 450,
        "y": 620,
        "wires": []
    },
    {
        "id": "0c7cbde017b44877",
        "type": "link out",
        "z": "803455e.14d3d28",
        "d": true,
        "name": "data_gen",
        "links": [
            "84d99c19.67892",
            "554edde8.db9efc"
        ],
        "x": 945,
        "y": 840,
        "wires": []
    },
    {
        "id": "4462f599.69bb0c",
        "type": "comment",
        "z": "56ac0cbb.978d6c",
        "name": "Calculate Total Power Consumption",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "33ca4fcc.54615",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "Query-List",
        "func": "var a ='\"name\"'\n//msg.query=\"select * from powerdrive1 where \"+a+\"='powerdrive1'\"\nmsg.query= `from(bucket: \"edgedb\")\n  |> range(start: -5h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerdrive1\")\n  |> last()`;\nreturn msg; \n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "2f2206bb.f13332"
            ]
        ]
    },
    {
        "id": "fba4a9a5.e82c18",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "Query-List",
        "func": "var a ='\"name\"'\n//msg.query=\"select * from powerdrive2 where \"+a+\"='powerdrive2'\"\nmsg.query= `from(bucket: \"edgedb\")\n  |> range(start: -5m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerdrive2\")\n  |> last()`;\nreturn msg; \n\n\n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "ad1edda4.a7224"
            ]
        ]
    },
    {
        "id": "ad1edda4.a7224",
        "type": "influxdb in",
        "z": "56ac0cbb.978d6c",
        "influxdb": "4ad3ce8d.582c5",
        "name": "influxdb_query_power2",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "47df6e05.45bc98",
                "16716b3a.ae9815"
            ]
        ]
    },
    {
        "id": "47df6e05.45bc98",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nswitch (msg.payload[0]._measurement) \n{\n    case \"powerdrive1\":\n        context.data.power1 = msg.payload[2]._value;\n        msg = null;\n        break;\n    case \"powerdrive2\":\n        context.data.power2= msg.payload[2]._value;\n        msg = null;\n        break;\n    default:\n        msg = null;\n    \tbreak;\n}\n\nif(context.data.power1 !== null && context.data.power2 !== null) \n{\n\tmsg2 = {};\n    msg2 = context.data;\n\n    context.data=null;\n\treturn msg2;\n} \nelse\n{\n    \n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 220,
        "wires": [
            [
                "2fd23fd2.bd1b5",
                "dc69781c.6bd958"
            ]
        ]
    },
    {
        "id": "e874b51b.e7df48",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "join_and_write_power_Influxdb",
        "func": "total = msg.payload;\n\n\n    Beta = [{\n        measurement: \"GEN_KPI_TotalPower\",\n        fields:{\n            name: \"TotalPower\",\n            value:total,\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "4d3e876.90160f8",
                "9b10f05a.d8ee"
            ]
        ]
    },
    {
        "id": "9b10f05a.d8ee",
        "type": "influxdb batch",
        "z": "56ac0cbb.978d6c",
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1520,
        "y": 180,
        "wires": []
    },
    {
        "id": "2f2206bb.f13332",
        "type": "influxdb in",
        "z": "56ac0cbb.978d6c",
        "influxdb": "4ad3ce8d.582c5",
        "name": "influxdb_query_power1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "47df6e05.45bc98",
                "16716b3a.ae9815"
            ]
        ]
    },
    {
        "id": "554edde8.db9efc",
        "type": "link in",
        "z": "56ac0cbb.978d6c",
        "name": "",
        "links": [
            "3e5dc939.97a5b6",
            "edc207be.ce696",
            "0c7cbde017b44877"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "33ca4fcc.54615",
                "fba4a9a5.e82c18"
            ]
        ]
    },
    {
        "id": "2fd23fd2.bd1b5",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "sum_total_power",
        "func": "var arr = [];\nvar mean=0;\nvar sum=0;\n\narr = Object.keys(msg).map(function(key) {\n    return msg[key]\n    })\narr.splice(-1,1)\n\nfor(var i=0; i < arr.length ; i++){\n      sum = sum + arr[i];\n}\n// mean = sum / arr.length; \n\nmsg2 = new Object();\n//msg2.payload = (arr[0] + arr[1] + arr[2]) / arr.length; \n\nmsg2.payload = sum;\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "e874b51b.e7df48"
            ]
        ]
    },
    {
        "id": "4d3e876.90160f8",
        "type": "debug",
        "z": "56ac0cbb.978d6c",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "dc69781c.6bd958",
        "type": "debug",
        "z": "56ac0cbb.978d6c",
        "name": "Last Power Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "6eac8115.8634e",
        "type": "debug",
        "z": "56ac0cbb.978d6c",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 300,
        "wires": []
    },
    {
        "id": "16716b3a.ae9815",
        "type": "function",
        "z": "56ac0cbb.978d6c",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 380,
        "wires": [
            [
                "6eac8115.8634e"
            ]
        ]
    },
    {
        "id": "13ee085f.be8d98",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "5e1cdcc5.cf69a4"
            ]
        ]
    },
    {
        "id": "69401cb2.ee9d44",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "count",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "84d99c19.67892",
        "type": "link in",
        "z": "f7e739bb.370638",
        "name": "input_raw_data",
        "links": [
            "edc207be.ce696",
            "0c7cbde017b44877"
        ],
        "x": 55,
        "y": 160,
        "wires": [
            [
                "b64620ac.81fd3"
            ]
        ]
    },
    {
        "id": "c231c8cd.975aa",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "69401cb2.ee9d44",
                "9d60b753.7fcfc"
            ]
        ]
    },
    {
        "id": "3a59b4bb.74773c",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "COUNT",
        "func": "msgQueryCount = {}\nmsgQueryCount.measurement = msg.payload[0].measurement\n//msgQueryCount.query = 'SELECT COUNT(\"value\") FROM ' + msg.payload[0].measurement\n\nmsgQueryCount.query= `from(bucket: \"edgedb\")\n  |> range(start: -5h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerdrive1\" or r[\"_measurement\"] == \"powerdrive2\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> count()`;\nreturn msgQueryCount;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "c231c8cd.975aa"
            ]
        ]
    },
    {
        "id": "9d60b753.7fcfc",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "GET_LAST_ENTRIES",
        "func": "msgQueryGet = {}\nmsgQueryGet.measurement = msg.measurement\nif (msg.payload[0]._value >= 50) {\n    //msgQueryGet.query = 'SELECT * FROM ' + msg.measurement + ' ORDER BY time DESC limit 50'\n    msgQueryGet.query= `from(bucket: \"edgedb\")\n                      |> range(start: -5h)\n                      |> filter(fn: (r) => r[\"_measurement\"] == \"${msg.measurement}\")\n                      |> filter(fn: (r) => r[\"_field\"] == \"value\")\n                      |> sort(columns: [\"_time\"], desc: true)\n                      |> limit(n: 50)\n                      |> group()`;\n    return msgQueryGet;\n}\n\nelse {msgQueryGet.query= `from(bucket: \"edgedb\")\n              |> range(start: -5h)\n              |> filter(fn: (r) => r[\"_measurement\"] == \"${msg.measurement}\")\n              |> filter(fn: (r) => r[\"_field\"] == \"value\")\n              |> sort(columns: [\"_time\"], desc: true)\n              |> group()`;\n    return msgQueryGet;\n    \n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "13ee085f.be8d98"
            ]
        ]
    },
    {
        "id": "c561e0d7.eb0998",
        "type": "comment",
        "z": "f7e739bb.370638",
        "name": "### check if measurement has enough entries and get last 5 values if true",
        "info": "",
        "x": 320,
        "y": 20,
        "wires": []
    },
    {
        "id": "7000bdea.5b3c8c",
        "type": "mqtt out",
        "z": "f7e739bb.370638",
        "name": "StandardKpis",
        "topic": "StandardKpis",
        "qos": "",
        "retain": "",
        "broker": "b6ec4c8d.61eac",
        "x": 1220,
        "y": 160,
        "wires": []
    },
    {
        "id": "5e1cdcc5.cf69a4",
        "type": "json",
        "z": "f7e739bb.370638",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "408593f2.7ce534",
                "7000bdea.5b3c8c"
            ]
        ]
    },
    {
        "id": "408593f2.7ce534",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "response_get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "51e1820.ff6d8fc",
        "type": "comment",
        "z": "f7e739bb.370638",
        "name": "PowerDrive1 and PowerDrive2 last 50 entries",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "cc9de0f5.cdc4e",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "67b35a2b.c82f54"
            ]
        ]
    },
    {
        "id": "b55ad1ad.1d31e8",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "6e9cf99d.f4721",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "from(bucket: \"edgedb\")\n  |> range(start: -5h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"voltagedrive3\" and (r[\"_field\"] == \"value\"))\n  |> count()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "e0680050.bd51a",
                "d40d07c0.067dc8"
            ]
        ]
    },
    {
        "id": "e0680050.bd51a",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "GET_LAST_ENTRIES",
        "func": "// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'voltagedrive3'\n    if (msg.payload[0]._value >= n) {\n        msgQueryGet.SampleNumber = n\n        //msgQueryGet.query = 'SELECT \"value\" FROM voltagedrive3 ORDER BY time DESC limit ' + n\n        msgQueryGet.query= `from(bucket: \"edgedb\")\n                  |> range(start: -5h)\n                  |> filter(fn: (r) => r[\"_measurement\"] == \"voltagedrive3\" and (r[\"_field\"] == \"value\"))\n                  |> sort(columns: [\"_time\"], desc: true)\n                  |> limit(n: 50)`;\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }\n    else {\n    msgQueryGet.SampleNumber = n\n    msgQueryGet.query= `from(bucket: \"edgedb\")\n              |> range(start: -5h)\n              |> filter(fn: (r) => r[\"_measurement\"] == \"voltagedrive3\" and (r[\"_field\"] == \"value\"))\n              |> sort(columns: [\"_time\"], desc: true)`;\n        return msgQueryGet;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 400,
        "wires": [
            [
                "cc9de0f5.cdc4e",
                "67cd84cb.b3012c"
            ]
        ]
    },
    {
        "id": "206e8e74.bad04a",
        "type": "mqtt out",
        "z": "f7e739bb.370638",
        "name": "Mean",
        "topic": "Mean",
        "qos": "",
        "retain": "",
        "broker": "b6ec4c8d.61eac",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "587d20bd.56fc1",
        "type": "comment",
        "z": "f7e739bb.370638",
        "name": "VoltageDrive3 dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "d73768e8.892c4",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "67b35a2b.c82f54"
            ]
        ]
    },
    {
        "id": "30279058.935348",
        "type": "influxdb in",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "from(bucket: \"edgedb\")\n  |> range(start: -5h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"currentdrive3\" and (r[\"_field\"] == \"value\"))\n  |> count()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "e483dac2.b82e5"
            ]
        ]
    },
    {
        "id": "e483dac2.b82e5",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "GET_LAST_ENTRIES",
        "func": "\n\n// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'currentdrive3'\n    if (msg.payload[0]._value >= n) {\n        msgQueryGet.SampleNumber = n\n        //msgQueryGet.query = 'SELECT \"value\" FROM currentdrive3 ORDER BY time DESC limit ' + n\n        msgQueryGet.query= `from(bucket: \"edgedb\")\n          |> range(start: -5h)\n          |> filter(fn: (r) => r[\"_measurement\"] == \"currentdrive3\" and (r[\"_field\"] == \"value\"))\n          |> sort(columns: [\"_time\"], desc: true)\n          |> limit(n: 50)`;\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }\n    else {\n    msgQueryGet.SampleNumber = n\n    msgQueryGet.query= `from(bucket: \"edgedb\")\n              |> range(start: -5h)\n              |> filter(fn: (r) => r[\"_measurement\"] == \"currentdrive3\" and (r[\"_field\"] == \"value\"))\n              |> sort(columns: [\"_time\"], desc: true)`;\n        return msgQueryGet;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "d73768e8.892c4"
            ]
        ]
    },
    {
        "id": "fe2bcb9b.e56fb8",
        "type": "comment",
        "z": "f7e739bb.370638",
        "name": "CurrentDrive3  dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "b64620ac.81fd3",
        "type": "switch",
        "z": "f7e739bb.370638",
        "name": "filter",
        "property": "payload[0].measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "powerdrive1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerdrive2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltagedrive3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "currentdrive3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "3a59b4bb.74773c"
            ],
            [
                "3a59b4bb.74773c"
            ],
            [
                "6e9cf99d.f4721",
                "4d240511.3cb51c"
            ],
            [
                "30279058.935348"
            ]
        ]
    },
    {
        "id": "67b35a2b.c82f54",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "manual_join",
        "func": "var tempo_cd3_batch = context.get('cd3_batch')||[];\nvar tempo_vd3_batch = context.get('vd3_batch')||[];\n\nfunction build_analytics_object(){\n    data_obj = {\n        sample_number : msg.SampleNumber,\n        current_drive3_batch : tempo_cd3_batch,\n        voltage_drive3_batch : tempo_vd3_batch,\n    }\n    return data_obj\n}\n\n\nif (msg.measurement == 'currentdrive3'){\n    tempo_cd3_batch = msg.payload\n    context.set('cd3_batch',tempo_cd3_batch)\n    \n}\nelse if (msg.measurement == 'voltagedrive3') {\n    tempo_vd3_batch = msg.payload\n    context.set('vd3_batch',tempo_vd3_batch)\n}\n\nif (tempo_cd3_batch.length > 0 && tempo_vd3_batch.length >0 ) {\n    py_obj={}\n    py_obj.payload = build_analytics_object()\n    tempo_cd3_batch = []\n    tempo_vd3_batch = []\n    context.set('cd3_batch', tempo_cd3_batch)\n    context.set('vd3_batch', tempo_vd3_batch)\n    \n    return py_obj\n    \n}\n\nelse{\n    return\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "b55ad1ad.1d31e8",
                "206e8e74.bad04a"
            ]
        ]
    },
    {
        "id": "49c977da.a0dce",
        "type": "mqtt in",
        "z": "f7e739bb.370638",
        "name": "",
        "topic": "StandardKpiResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "b6ec4c8d.61eac",
        "inputs": 0,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "b119df7b.43a088"
            ]
        ]
    },
    {
        "id": "f85bea86.d12e9",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "response standard kpis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "b119df7b.43a088",
        "type": "json",
        "z": "f7e739bb.370638",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "fbd3d4ca.35021"
            ]
        ]
    },
    {
        "id": "fbd3d4ca.35021",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_standardkpis = {}\noutput_standardkpis.measurement = my_payload.name.toUpperCase() + '_STANDARD_KPIS'\noutput_standardkpis.payload = {\n    mean: Math.round(my_payload.mean_result * 1e2)/ 1e2,\n    median: Math.round(my_payload.median_result * 1e2)/ 1e2,\n    stddev: Math.round(my_payload.stddev_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_standardkpis;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 820,
        "wires": [
            [
                "8736d8c4.6a8dd8",
                "f85bea86.d12e9"
            ]
        ]
    },
    {
        "id": "8736d8c4.6a8dd8",
        "type": "influxdb out",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "e09b497.2d66eb8",
        "type": "mqtt in",
        "z": "f7e739bb.370638",
        "name": "",
        "topic": "MeanResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "b6ec4c8d.61eac",
        "inputs": 0,
        "x": 110,
        "y": 960,
        "wires": [
            [
                "9fe01ff4.3223f"
            ]
        ]
    },
    {
        "id": "e8bf4594.e0d068",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "response mean",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 920,
        "wires": []
    },
    {
        "id": "9fe01ff4.3223f",
        "type": "json",
        "z": "f7e739bb.370638",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "e9d5781f.cd3a1"
            ]
        ]
    },
    {
        "id": "e9d5781f.cd3a1",
        "type": "function",
        "z": "f7e739bb.370638",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_pd1_mean = {}\noutput_pd1_mean.measurement = my_payload.name.toUpperCase()\noutput_pd1_mean.payload = {\n    value: Math.round(my_payload.power_mean_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_pd1_mean;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 960,
        "wires": [
            [
                "36636dbd.e80eda",
                "e8bf4594.e0d068"
            ]
        ]
    },
    {
        "id": "36636dbd.e80eda",
        "type": "influxdb out",
        "z": "f7e739bb.370638",
        "influxdb": "4ad3ce8d.582c5",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "bb22a94d.81ee48",
        "type": "comment",
        "z": "f7e739bb.370638",
        "name": "Data Analytics Results",
        "info": "",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "4d240511.3cb51c",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 280,
        "wires": []
    },
    {
        "id": "d40d07c0.067dc8",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "67cd84cb.b3012c",
        "type": "debug",
        "z": "f7e739bb.370638",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 300,
        "wires": []
    }
]